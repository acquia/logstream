#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'json'
require 'logstream/client'
require 'logstream/cloudapi_v2'

class LogTailorCLI < Thor
  desc "tail APPLICATION_UUID ENV", "Stream log information for the specified application environment."
  method_option(:types, :type => :array, :aliases => '-t',
                :desc => "Only display listed log types",
                :default => %w(apache-request php-error drupal-watchdog varnish-request),
                :banner => "apache-request apache-error php-error drupal-request drupal-watchdog varnish-request"
                )
  method_option(:show, :type => :array, :aliases => '-s',
                :desc => "Fow rows containing the column, only show them if the column matches the regexp.",
                :banner => "column=regexp ..."
                )
  method_option(:hide, :type => :array, :aliases => '-h',
                :desc => "For rows containing a column, do not show them if the column matches the regexp.",
                :banner => "column=regexp ..."
                )
  method_option(:columns, :type => :array, :aliases => '-c',
                :desc => "Display the specified columns.",
                :default => %w(text),
                :banner => "disp_time http_status log_type request_id server text"
                )
  method_option(:color, :type => :boolean, :default => true, :desc => 'Turn on or off colorized lines.')
  method_option(:debug, :type => :boolean, :default => false, :desc => 'Turn on debugging.')
  def tail(application_uuid, env)
    begin
      shows = Hash[options[:show].map { |s| s.split('=') }.map { |k,v| [k, Regexp.new(v)] }] rescue {}
      hides = Hash[options[:hide].map { |h| h.split('=') }.map { |k,v| [k, Regexp.new(v)] }] rescue {}

      begin
        confpath = "#{ENV['HOME']}/.acquia/cloudapiv2.conf"
        begin
          json = File.read(confpath)
          config = JSON.load(json)
        rescue Errno::ENOENT, JSON::ParserError => e
          raise Error, "#{confpath} is missing or invalid. Please configure your Cloud API v2 credentials"
        end
        cloudapi_client = Logstream::CloudAPIV2.new(config['api_key'], config['api_secret'])
        environments = cloudapi_client.get_application_environments(application_uuid)
        environment_uuid = nil
        environments.each do |environment|
          if environment['name'] == env
            environment_uuid = environment['id']
          end
        end
        raise Error, "No environment found with #{env} name." unless environment_uuid
        stream_info = cloudapi_client.get_envirornment_logstream(environment_uuid)
        logstream = Logstream::Client.new({ 
                                            :columns => options[:columns],
                                            :types => options[:types],
                                            :shows => shows,
                                            :hides => hides,
                                            :no_color => !options[:color],
                                            :debug => options[:debug],
                                          })
        logstream.run(stream_info['url'], stream_info['params'])
      rescue Logstream::CloudAPIV2::Error => e
        puts "Cloud API error: #{e.message}"
        exit(1)
      end
    end
  end
end

LogTailorCLI.start(ARGV)

