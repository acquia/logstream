#!/usr/bin/env ruby

require 'rubygems'
require 'net/https'
require 'json'
require 'thor'
require 'logstream/client'
require 'acquia_sdk_ruby'

class LogTailorCLI < Thor
  desc "tail SITE ENV", "Stream log information for the specified site environment."
  method_option(:types, :type => :array, :aliases => '-t',
                :desc => "Only display listed log types",
                :default => %w(apache-request php-error drupal-watchdog varnish-request),
                :banner => "apache-request apache-error php-error drupal-request drupal-watchdog varnish-request"
                )
  method_option(:show, :type => :array, :aliases => '-s',
                :desc => "Fow rows containing the column, only show them if the column matches the regexp.",
                :banner => "column=regexp ..."
                )
  method_option(:hide, :type => :array, :aliases => '-h',
                :desc => "For rows containing a column, do not show them if the column matches the regexp.",
                :banner => "column=regexp ..."
                )
  method_option(:columns, :type => :array, :aliases => '-c',
                :desc => "Display the specified columns.",
                :default => %w(text),
                :banner => "disp_time http_status log_type request_id server text"
                )
  method_option(:color, :type => :boolean, :default => true, :desc => 'Turn on or off colorized lines.')
  method_option(:endpoint, :type => :string, :desc => 'The Cloud API URL to connect to.')
  method_option(:debug, :type => :boolean, :default => false, :desc => 'Turn on debugging.')
  def tail(site, env)
    begin
      shows = Hash[options[:show].map { |s| s.split('=') }.map { |k,v| [k, Regexp.new(v)] }] rescue {}
      hides = Hash[options[:hide].map { |h| h.split('=') }.map { |k,v| [k, Regexp.new(v)] }] rescue {}

      begin
        client = Acquia::CloudApi::Client.new
        info = client.get "sites/#{site}/envs/#{env}/logstream.json"

        logstream = Logstream::Client.new({
          :columns  => options[:columns],
          :types    => options[:types],
          :shows    => shows,
          :hides    => hides,
          :no_color => !options[:color],
          :debug    => options[:debug],
        })

        logstream.run(info['url'], info['msg'])
      rescue StandardError => e
        puts "Cloud API Error: #{e.message}"
      end
    end
  end
end

LogTailorCLI.start

