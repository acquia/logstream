#!/usr/bin/env ruby

require 'rubygems'
require 'net/https'
require 'json'
require 'thor'
require 'logstream/client'

# @todo: Yeah, this is terrible. Replace it with a real Cloud API gem.
class QuickCloudAPI
  class Error < StandardError; end

  def self.get(path, opts = {})
    confpath = "#{ENV['HOME']}/.acquia/cloudapi.conf"
    begin
      json = File.read(confpath)
      config = JSON.load(json)
    rescue Errno::ENOENT, JSON::ParserError => e
      raise Error, "#{confpath} is missing or invalid. Download your Drush aliases from https://accounts.acquia.com/account/security to initialize it."
    end
    opts[:endpoint] ||= "https://cloudapi.acquia.com/v1"
    uri = URI.parse("#{opts[:endpoint]}#{path}.json")
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.ca_file = File.dirname(__FILE__) + "/../etc/ca.pem"
    http.verify_mode = OpenSSL::SSL::VERIFY_PEER
    request = Net::HTTP::Get.new(uri.request_uri)
    request.basic_auth(config['email'], config['key'])
    response = http.request(request)
    parsed = JSON.parse(response.body) rescue nil
    case response.code.to_i
    when 200
      raise Error, "Unexpected reply #{response.body}" unless parsed
      parsed
    else
      raise Error, "HTTP #{response.code}: #{response.body}"
    end
  end
end

class LogTailorCLI < Thor
  desc "tail SITE ENV", "Stream log information for the specified site environment."
  method_option(:types, :type => :array, :aliases => '-t',
                :desc => "Only display listed log types",
                :default => %w(apache-access php-error drupal-watchdog),
                :banner => "apache-access apache-error php-error drupal-request drupal-watchdog bal-access"
                )
  method_option(:show, :type => :array, :aliases => '-s',
                :desc => "Fow rows containing the column, only show them if the column matches the regexp.",
                :banner => "column=regexp ..."
                )
  method_option(:hide, :type => :array, :aliases => '-h',
                :desc => "For rows containing a column, do not show them if the column matches the regexp.",
                :banner => "column=regexp ..."
                )
  method_option(:columns, :type => :array, :aliases => '-c',
                :desc => "Display the specified columns.",
                :default => %w(text),
                :banner => "type disp_time unix_time text server http_status"
                )
  method_option(:color, :type => :boolean, :default => true, :desc => 'Turn on or off colorized lines.')
  method_option(:endpoint, :type => :string, :desc => 'The Cloud API URL to connect to.')
  def tail(site, env)
    begin
      shows = Hash[options[:show].map { |s| s.split('=') }.map { |k,v| [k, Regexp.new(v)] }] rescue {}
      hides = Hash[options[:hide].map { |h| h.split('=') }.map { |k,v| [k, Regexp.new(v)] }] rescue {}

      begin
        info = QuickCloudAPI.get("/sites/#{site}/envs/#{env}/logstream", { :endpoint => options[:endpoint] })
        logstream = Logstream::Client.new({ 
                                            :columns => options[:columns],
                                            :shows => shows,
                                            :hides => hides,
                                            :no_color => !options[:color],
                                          })
        logstream.run(info['url'], info['msg'])
      rescue QuickCloudAPI::Error => e
        puts "Cloud API error: #{e.message}"
        exit(1)
      end
    end
  end
end

LogTailorCLI.start

